services:
  redis:
    image: redis:7-alpine
    container_name: superset_cache
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - superset_network

  postgres:
    image: postgres:16-alpine
    container_name: superset_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-superset}
      POSTGRES_USER: ${POSTGRES_USER:-superset}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - superset_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-superset}"]
      interval: 10s
      timeout: 5s
      retries: 5

  superset-init:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        LOAD_EXAMPLES_DUCKDB: "true"
    container_name: superset_init
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      SUPERSET_ENV: production
      SUPERSET_SECRET_KEY: ${SUPERSET_SECRET_KEY}
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_DB: ${POSTGRES_DB:-superset}
      DATABASE_USER: ${POSTGRES_USER:-superset}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_DIALECT: postgresql
      REDIS_HOST: redis
      REDIS_PORT: 6379
      SQLALCHEMY_DATABASE_URI: postgresql+psycopg2://${POSTGRES_USER:-superset}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-superset}
      SUPERSET_LOAD_EXAMPLES: ${SUPERSET_LOAD_EXAMPLES:-no}
    networks:
      - superset_network
    volumes:
      - superset_home:/app/superset_home
    command: >
      bash -c "
        superset db upgrade &&
        superset fab create-admin --username ${ADMIN_USERNAME:-admin} --firstname ${ADMIN_FIRSTNAME:-Admin} --lastname ${ADMIN_LASTNAME:-User} --email ${ADMIN_EMAIL:-admin@example.com} --password ${ADMIN_PASSWORD:-admin} || true &&
        superset init &&
        if [ \"${SUPERSET_LOAD_EXAMPLES:-no}\" = \"yes\" ]; then
          superset load-examples;
        fi
      "

  superset:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        LOAD_EXAMPLES_DUCKDB: "true"
    container_name: superset_app
    restart: unless-stopped
    depends_on:
      superset-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    ports:
      - "${SUPERSET_PORT:-8088}:8088"
    environment:
      SUPERSET_ENV: production
      SUPERSET_SECRET_KEY: ${SUPERSET_SECRET_KEY}
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_DB: ${POSTGRES_DB:-superset}
      DATABASE_USER: ${POSTGRES_USER:-superset}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_DIALECT: postgresql
      REDIS_HOST: redis
      REDIS_PORT: 6379
      SQLALCHEMY_DATABASE_URI: postgresql+psycopg2://${POSTGRES_USER:-superset}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-superset}
    networks:
      - superset_network
    volumes:
      - superset_home:/app/superset_home
    command: >
      bash -c "
        gunicorn --bind 0.0.0.0:8088 --access-logfile - --error-logfile - --workers ${SUPERSET_WORKERS:-4} --worker-class gthread --threads ${SUPERSET_THREADS:-20} --timeout ${SUPERSET_TIMEOUT:-60} --limit-request-line 0 --limit-request-field_size 0 'superset.app:create_app()'
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  superset-worker:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        LOAD_EXAMPLES_DUCKDB: "true"
    container_name: superset_worker
    restart: unless-stopped
    depends_on:
      superset-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      SUPERSET_ENV: production
      SUPERSET_SECRET_KEY: ${SUPERSET_SECRET_KEY}
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_DB: ${POSTGRES_DB:-superset}
      DATABASE_USER: ${POSTGRES_USER:-superset}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_DIALECT: postgresql
      REDIS_HOST: redis
      REDIS_PORT: 6379
      SQLALCHEMY_DATABASE_URI: postgresql+psycopg2://${POSTGRES_USER:-superset}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-superset}
      CELERY_CONFIG_OPTIONS: database
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      SUPERSET__SQLALCHEMY_EXAMPLES_URI: "duckdb:////app/data/examples.duckdb"
      C_FORCE_ROOT: "true"
    networks:
      - superset_network
    volumes:
      - superset_home:/app/superset_home
    command: >
      bash -c "
        celery --app=superset.tasks.celery_app:app worker --loglevel=${CELERY_LOG_LEVEL:-INFO} --concurrency=${CELERY_WORKERS:-2}
      "
    healthcheck:
      test: ["CMD-SHELL", "celery -A superset.tasks.celery_app:app inspect ping -d celery@$$HOSTNAME"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  superset-beat:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        LOAD_EXAMPLES_DUCKDB: "true"
    container_name: superset_beat
    restart: unless-stopped
    depends_on:
      superset-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      SUPERSET_ENV: production
      SUPERSET_SECRET_KEY: ${SUPERSET_SECRET_KEY}
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_DB: ${POSTGRES_DB:-superset}
      DATABASE_USER: ${POSTGRES_USER:-superset}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_DIALECT: postgresql
      REDIS_HOST: redis
      REDIS_PORT: 6379
      SQLALCHEMY_DATABASE_URI: postgresql+psycopg2://${POSTGRES_USER:-superset}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-superset}
      CELERY_CONFIG_OPTIONS: database
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      SUPERSET__SQLALCHEMY_EXAMPLES_URI: "duckdb:////app/data/examples.duckdb"
      C_FORCE_ROOT: "true"
    networks:
      - superset_network
    volumes:
      - superset_home:/app/superset_home
    command: >
      bash -c "
        celery --app=superset.tasks.celery_app:app beat --loglevel=${CELERY_LOG_LEVEL:-INFO} --schedule=/tmp/celerybeat-schedule
      "

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  superset_home:
    driver: local

networks:
  superset_network:
    driver: bridge